# Default settings
File { ignore => '.svn',
  source_permissions => ignore,
  backup             => false,
}

Package {
  allow_virtual => false,
}

Exec {
  path => '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin',
}
<% if apps_package and !apps_package.empty? %>

    Exec{'tar -zxvf /vagrant/puppet/files/<%= File.basename(apps_package) %> -C /home/vagrant/ ':
        cwd => '/vagrant/puppet/files'
    }
<% end %>

<% if esapi_package and !esapi_package.empty? %>

    Exec{'tar -zxvf /vagrant/puppet/files/<%= File.basename(esapi_package) %> -C /home/vagrant/ ':
        cwd => '/vagrant/puppet/files'
    }
<% end %>

service { 'firewalld' :
  ensure => stopped,
  enable => false,
}

class { selinux:
  mode => 'permissive',
  type => 'targeted',
}


# Apahe Configurations

$apache_dirs = [ '/var/www',
                 '/var/www/vhosts', ]

file { $apache_dirs :
  ensure => directory,
  owner  => 'vagrant',
  group  => 'vagrant',
  mode   => '0775',
  before => Class['apache'],
}

class { 'apache' : 
  default_confd_files => false,
  default_mods        => false,
  default_vhost       => false,
  purge_vhost_dir     => true,
  vhost_dir           => '/etc/httpd/vhost.d',
}

<% if ssl_package and !ssl_package.empty? %>
    Exec{'sudo tar -zxvf /vagrant/puppet/files/<%= File.basename(ssl_package) %> -C /etc/httpd/':
      cwd => '/vagrant/puppet/files',
      path => '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin'
    }
<% end %>

include apache::mod::rewrite
include apache::mod::deflate
<% if ssl_package and !ssl_package.empty? %>
    include apache::mod::ssl
<% end %>

include apache::mod::expires

class { 'apache::mod::info' :
  restrict_access => false,
}

class { 'aem::dispatcher' :
  decline_root      => 'off',
  module_file       => '/vagrant/puppet/files/<%= File.basename(dispatcher_mod) %>',
  dispatcher_name   => '<%= client %>',
  log_level         => 'debug',
  use_processed_url => 'on'
}

aem::dispatcher::farm { '<%= client %>' :
  docroot => '/var/www/vhosts/<%=client %>',
}

#apache::vhost { 'jenkins.localhost' :
#  docroot     => '/var/www/vhosts/jenkins',
#  port        => '80',
#}

apache::vhost { 'author.localhost' :
  docroot     => '/var/www/vhosts/author',
  port        => '80',
  proxy_pass  => [
    { 'path' => '/', 'url' => 'http://localhost:4502/' }
  ]
}

apache::vhost { 'publish.localhost' :
  docroot     => '/var/www/vhosts/publish',
  port        => '80',
  proxy_pass  => [
    { 'path' => '/', 'url' => 'http://localhost:4503/' }
  ]
}

apache::vhost { '<%= client %>.localhost' :
  custom_fragment => '

  <IfModule disp_apache2.c>
    SetHandler dispatcher-handler
  </IfModule>
',
  default_vhost   => true,
  docroot         => '/var/www/vhosts/<%= client %>',
  <% if ssl_package and !ssl_package.empty? %>
    port            => '443',
    ssl      => true,
  <% else %>
    port => '80',
  <% end %>
#  proxy_pass      => [],
  request_headers => ['unset Authorization'],
  override => ['All'],
#  rewrites        => [],
}


# Java Configurations

<% if jdk_pkg and !jdk_pkg.empty? %>
package { 'java' :
  ensure          => 'installed',
  source          => '/vagrant/puppet/files/<%= File.basename(jdk_pkg) %>',
  provider        => 'rpm',
  before          => File['/opt/aem'],
  install_options => '--replacepkgs'

}

<% else %>

class { 'java' : 
  before   => File['/opt/aem'],
}

<% end %>
# renaming default cacerts to cacerts-bak
<% if cacerts_path and !cacerts_path.empty? %>

    Exec{'sudo mv cacerts cacerts-bak':
      path => '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin',
      cwd => '/etc/pki/ca-trust/extracted/java'
    }

    # Moving cacerts file to java jre security folder
    Exec{'sudo mv /vagrant/puppet/files/<%= File.basename(cacerts_path) %> .':
      path => '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin',
      cwd => '/etc/pki/ca-trust/extracted/java'
    }
<% end %>


# Moving dispatcher farm file
<% if dispatcher_any and !dispatcher_any.empty? %>
    Exec{'sudo mv /vagrant/puppet/files/<%= File.basename(dispatcher_any) %> .':
          path => '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin',
          cwd => '/etc/httpd/conf.modules.d'
    }
<% end %>
# AEM Configurations

file { '/opt/aem': 
  ensure => directory,
  owner  => 'vagrant',
  group  => 'vagrant',
}

aem::instance { 'author' :
  debug_port      => 30303,
  group           => 'vagrant',
  home            => '/opt/aem/author',
  jvm_mem_opts    => '-Xmx2048m',
  manage_group    => false,
  manage_user     => false,
  port            => 4502,
  runmodes        => ['dev','linux'],
  sample_content  => false,
  source          => '/vagrant/puppet/files/<%= File.basename(aem_jar) %>',
  type            => 'author',
  user            => 'vagrant',
  version         => '6.4.0',
  require         => File['/opt/aem'],
}

aem::instance { 'publish' :
  debug_port      => 30304,
  group           => 'vagrant',
  home            => '/opt/aem/publish',
  jvm_mem_opts    => '-Xmx2048m',
  manage_group    => false,
  manage_user     => false,
  port            => 4503,
  runmodes        => ['dev','linux'],
  sample_content  => false,
  source          => '/vagrant/puppet/files/<%= File.basename(aem_jar) %>',
  type            => 'publish',
  user            => 'vagrant',
  version         => '6.4.0',
  require         => File['/opt/aem'],
}

aem::license { 'author' :
  customer    => '<%= client %>',
  group       => 'vagrant',
  home        => '/opt/aem/author',
  license_key => '<%= aem_license %>',
  user        => 'vagrant',
  version     => '6.4.0',
}

aem::license { 'publish' :
  customer    => '<%= client %>',
  group       => 'vagrant',
  home        => '/opt/aem/publish',
  license_key => '<%= aem_license %>',
  user        => 'vagrant',
  version     => '6.4.0',
}
<% if content_zip and !content_zip.empty? %>

    aem::crx::package{ 'author-mytmo-content':
      ensure =>'installed',
      source => '/vagrant/puppet/files/<%= File.basename(content_zip) %>',
      user => 'vagrant',
      group => 'vagrant',
      home => '/opt/aem/author',
        type => 'file'
    }

    aem::crx::package{ 'publish-mytmo-content':
      ensure =>'installed',
      source => '/vagrant/puppet/files/<%= File.basename(content_zip) %>',
      user => 'vagrant',
      group => 'vagrant',
      home => '/opt/aem/publish',
        type => 'file'
    }
<% end %>


