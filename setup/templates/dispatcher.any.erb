/farms
{
  /<%= client %>-site
  {
    /clientheaders { "*" }

    /virtualhosts
    {
      "<%= client %>.localhost"
    }

    # The load will be balanced among these render instances
    /renders
    {
      /publish
      {
        /hostname "127.0.0.1"
        /port "4503"
      }
    }

    /filter
          {
          # Deny everything first and then allow specific entries
          /0001 { /type "deny" /glob "*" }

          # Open consoles
    #     /0011 { /type "allow" /url "/admin/*"  }  # allow servlet engine admin
    #     /0012 { /type "allow" /url "/crx/*"    }  # allow content repository
    #     /0013 { /type "allow" /url "/system/*" }  # allow OSGi console

          # Allow non-public content directories
    #     /0021 { /type "allow" /url "/apps/*"   }  # allow apps access
    #     /0022 { /type "allow" /url "/bin/*"    }
          /0023 { /type "allow" /url "/content*" }  # disable this rule to allow mapped content only

    #     /0024 { /type "allow" /url "/libs/*"   }
    #     /0025 { /type "deny"  /url "/libs/shindig/proxy*" } # if you enable /libs close access to proxy

    #     /0026 { /type "allow" /url "/home/*"   }
    #     /0027 { /type "allow" /url "/tmp/*"    }
    #     /0028 { /type "allow" /url "/var/*"    }

          # Enable extensions in non-public content directories, using a regular expression
          /0041
            {
            /type "allow"
            /extension '(clientlibs|css|gif|ico|js|png|swf|jpe?g|woff2?)'
            }

          # Enable features
          /0062 { /type "allow" /url "/libs/cq/personalization/*"  }  # enable personalization

          # Deny content grabbing, on all accessible pages, using regular expressions
          /0081
            {
            /type "deny"
            /selectors '((sys|doc)view|query|[0-9-]+)'
            /extension '(json|xml)'
            }
          # Deny content grabbing for /content
          /0082
            {
            /type "deny"
            /path "/content"
            /selectors '(feed|rss|pages|languages|blueprint|infinity|tidy)'
            /extension '(json|xml|html)'
            }

          # Uncomment the following to allow one-level json requests
    #     /0087 { /type "allow" /method "GET" /extension "json" /selectors "1" }

          }

    # The cache section regulates what responses will be cached and where.
    /cache
    {
      /docroot "/var/www/vhosts/<%= client %>"

      /statfileslevel "0"

      /allowAuthorized "0"

      /serveStaleOnError "0"

        /rules
        {
        /0000
          {
          # the globbing pattern to be compared against the url
          # example: *             -> everything
          #        : /foo/bar.*    -> only the /foo/bar documents
          #        : /foo/bar/*    -> all pages below /foo/bar
          #        : /foo/bar[./]* -> all pages below and /foo/bar itself
          #        : *.html        -> all .html files
          /glob "*"
          /type "allow"
          }
        }
          # The invalidate section defines the pages that are "invalidated" after
          # any activation. Please note that the activated page itself and all
          # related documents are flushed on an modification. For example: if the
          # page /foo/bar is activated, all /foo/bar.* files are removed from the
          # cache.
          /invalidate
            {
            /0000
              {
              /glob "*"
              /type "deny"
              }
            /0001
              {
              # Consider all HTML files stale after an activation.
              /glob "*.html"
              /type "allow"
              }
            /0002
              {
              /glob "/etc/segmentation.segment.js"
              /type "allow"
              }
            /0003
              {
              /glob "*/analytics.sitecatalyst.js"
              /type "allow"
              }
            }

          /allowedClients { }
           # The ignoreUrlParams section contains query string parameter names that
            # should be ignored when determining whether some request's output can be
            # cached or delivered from cache.
            #
            # In this example configuration, the "q" parameter will be ignored.
            #/ignoreUrlParams
            #  {
            #  /0001 { /glob "*" /type "deny" }
            #  /0002 { /glob "q" /type "allow" }
            #  }
            # Cache response headers next to a cached file. On the first request to
            # an uncached resource, all headers matching one of the values found here
            # are stored in a separate file, next to the cache file. On subsequent
            # requests to the cached resource, the stored headers are added to the
            # response.
            #
            # Note, that file globbing characters are not allowed here.
            #
            #/headers
            #  {
            #  "Cache-Control"
            #  "Content-Disposition"
            #  "Content-Type"
            #  "Expires"
            #  "Last-Modified"
            #  "X-Content-Type-Options"
            #  }

            # A grace period defines the number of seconds a stale, auto-invalidated
            # resource may still be served from the cache after the last activation
            # occurring. Auto-invalidated resources are invalidated by any activation,
            # when their path matches the /invalidate section above. This setting
            # can be used in a setup, where a batch of activations would otherwise
            # repeatedly invalidate the entire cache.
            #
            #/gracePeriod "2"

            # Enable TTL evaluates the response headers from the backend, and if they
            # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
            # next to the cache file is created, with modification time equal to the
            # expiry date. When the cache file is requested past the modification time
            # it is automatically re-requested from the backend.
            #
            # /enableTTL "1"

        }
        # The statistics sections dictates how the load should be balanced among the
        # renders according to the media-type.
        /statistics
          {
          /categories
            {
            /html
              {
              /glob "*.html"
              }
            /others
              {
              /glob "*"
              }
            }
          }
          # Authorization checker: before a page in the cache is delivered, a HEAD
          # request is sent to the URL specified in /url with the query string
          # '?uri='. If the response status is 200 (OK), the page is returned
          # from the cache. Otherwise, the request is forwarded to the render and
          # its response returned.
          #
          # Only pages matching the /filter section below are checked, all other pages
          # get delivered unchecked.
          #
          # All header lines returned from the auth_checker's HEAD request that match
          # the /headers section will be returned as well.
          #
          #/auth_checker
          #  {
          #  /url "/bin/permissioncheck.html"
          #  /filter
          #    {
          #    /0000
          #      {
          #      /glob "*"
          #      /type "deny"
          #      }
          #    /0001
          #      {
          #      /glob "*.html"
          #      /type "allow"
          #      }
          #    }
          #  /headers
          #    {
          #    /0000
          #      {
          #      /glob "*"
          #      /type "deny"
          #      }
          #    /0001
          #      {
          #      /glob "Set-Cookie:*"
          #      /type "allow"
          #      }
          #    }
          #  }
  }
}

