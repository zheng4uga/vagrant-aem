/farms
{
  /<%= client %>-site
  {
    /clientheaders { "*" }

    /virtualhosts
    {
      "<%= client %>.localhost"
    }

    # The load will be balanced among these render instances
    /renders
    {
      /publish
      {
        /hostname "127.0.0.1"
        /port "4503"
      }
    }
    /filter
    {
        # deny everything and allow specific entries

        /0001 { /type "deny" /glob "*" }
        #open consoles
        #/0012 { /type "allow" /glob "* /crx/*" } # allow content repository
        #/0013 { /type "allow" /glob "* /system/*" } # allow OSGi console
        #allow non-public content directories
        /0021 { /type "allow" /glob "* /apps/*" } # allow apps access
        /0022 { /type "allow" /glob "* /bin/*" }
        /0029 { /type "allow" /glob "* /etc/designs/unav/*" } # allow unav access
        /0030 { /type "allow" /glob "* /content/unav/*" } # allow unav access
        /0023 { /type "allow" /glob "* /content/*" } # disable this rule to allow mapped content only
         # /0024 { /type "allow" /glob "* /libs/*" }
         # /0025 { /type "deny" /glob "* /libs/shindig/proxy*" } # if you enable /libs close access to proxy
         # /0026 { /type "allow" /glob "* /home/*" }
         # /0027 { /type "allow" /glob "* /tmp/*" }
         # /0028 { /type "allow" /glob "* /var/*" }
         # enable specific mime types in non-public content directories
        /0041 { /type "allow" /glob "* *.css *" } # enable css
        /0042 { /type "allow" /glob "* *.gif *" } # enable gifs
        /0043 { /type "allow" /glob "* *.ico *" } # enable icos
        /0044 { /type "allow" /glob "* *.js *" } # enable javascript
        /0045 { /type "allow" /glob "* *.png *" } # enable png
        /0046 { /type "allow" /glob "* *.swf *" } # enable flash
        /0047 { /type "allow" /glob "* *.svg *" } # enable SVG
        /0048 { /type "allow" /glob "* *.woff *" } # enable woff
        /0049 { /type "allow" /glob "* *.ttf *" } # enable ttf
        /0050 { /type "allow" /glob "* *.eot *" } # enable eot
        /0051 { /type "allow" /glob "* *.jpg *" } # enable jpg

            # enable features
        /0061 { /type "allow" /glob "POST /content/[.]*.form.html" } # allow POSTs to form selectors under content
        /0062 { /type "allow" /glob "* /libs/cq/personalization/*" } # enable personalization
        /0063 { /type "allow" /glob "POST /content/[.]*.commerce.cart.json" } # allow POSTs to update the shopping cart

        # deny content grabbing
        /0081 { /type "deny" /glob "GET *.infinity.json*" }
        /0082 { /type "deny" /glob "GET *.tidy.json*" }
        /0083 { /type "deny" /glob "GET *.sysview.xml*" }
        /0084 { /type "deny" /glob "GET *.docview.json*" }
        /0085 { /type "deny" /glob "GET *.docview.xml*" }
        /0086 { /type "deny" /glob "GET *.*[0-9].json*" }
        /0087 { /type "deny" /glob "GET *.feed.xml*" }
        # /0088 { /type "allow" /glob "GET *.1.json*" } # allow one-level json requests

        # deny query
        /0090 { /type "deny" /glob "* *.query.json*" }
    }

    # The cache section regulates what responses will be cached and where.
    /cache
    {
      /docroot "/var/www/vhosts/<%= client %>"

      /statfileslevel "0"

      /allowAuthorized "0"

      /serveStaleOnError "0"

      /rules
      {
        /0000
          {
          /glob "*"
          /type "allow"
	      /compress "gzip"
          }
        /0001
          {
          /glob "/libs/*"
          /type "allow"
          }
        /0002
          {
          /glob "/libs/*.html"
          /type "deny"
          }
        /0003
          {
          /glob "/apps/*"
          /type "allow"
          }
        /0004
          {
          /glob "/apps/*.html"
          /type "deny"
          }
        /0005
          {
          /glob "/content/*.MA.html"
          /type "deny"
          }
          /0006
          {
          /glob "/content/*.ma.html"
          /type "deny"
          }
          /0007
          {
          # This page contains a "Welcome, User XXX" message
          /glob "/libs/cq/core/content/welcome.*"
          /type "deny"
          }
          /0008
          {
          /glob "*/fonts/*"
          #
          /type "allow"
          }
          /0009
          {
          /glob "*/login.html"
          /type "deny"
          }
          ####-- clear cache starts for feature phone --
          /0010
          {
          /glob "*/feature/*.html"
          /type "deny"
          }
          /0011
          {
          /glob "*/feature/*.css"
          /type "deny"
          }
              /0012
           {
           /glob "*/data-limit-status.html"
           /type "deny"
           }

            /0013
          {
          /glob "/content/header.html"
          /type "deny"
          }
          # -- END  --
          /0014
          {
          /glob "*/home.html"
          /type "deny"
          }
          /0015
          {
           /glob "*/tools.html"
           /type "deny"
          }
          /0016
            {
            /glob "*/usageoverview.html"
            /type "deny"
            }
        }
          # The invalidate section defines the pages that are "invalidated" after
          # any activation. Please note that the activated page itself and all
          # related documents are flushed on an modification. For example: if the
          # page /foo/bar is activated, all /foo/bar.* files are removed from the
          # cache.
          /invalidate
            {
            /0000
              {
              /glob "*"
              /type "deny"
              }
            /0001
              {
              # Consider all HTML files stale after an activation.
              /glob "*.html"
              /type "allow"
              }
            /0002
              {
              /glob "/etc/segmentation.segment.js"
              /type "allow"
              }
            /0003
              {
              /glob "*/analytics.sitecatalyst.js"
              /type "allow"
              }
            }

          /allowedClients { }
           # The ignoreUrlParams section contains query string parameter names that
            # should be ignored when determining whether some request's output can be
            # cached or delivered from cache.
            #
            # In this example configuration, the "q" parameter will be ignored.
            #/ignoreUrlParams
            #  {
            #  /0001 { /glob "*" /type "deny" }
            #  /0002 { /glob "q" /type "allow" }
            #  }
            # Cache response headers next to a cached file. On the first request to
            # an uncached resource, all headers matching one of the values found here
            # are stored in a separate file, next to the cache file. On subsequent
            # requests to the cached resource, the stored headers are added to the
            # response.
            #
            # Note, that file globbing characters are not allowed here.
            #
            #/headers
            #  {
            #  "Cache-Control"
            #  "Content-Disposition"
            #  "Content-Type"
            #  "Expires"
            #  "Last-Modified"
            #  "X-Content-Type-Options"
            #  }

            # A grace period defines the number of seconds a stale, auto-invalidated
            # resource may still be served from the cache after the last activation
            # occurring. Auto-invalidated resources are invalidated by any activation,
            # when their path matches the /invalidate section above. This setting
            # can be used in a setup, where a batch of activations would otherwise
            # repeatedly invalidate the entire cache.
            #
            #/gracePeriod "2"

            # Enable TTL evaluates the response headers from the backend, and if they
            # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
            # next to the cache file is created, with modification time equal to the
            # expiry date. When the cache file is requested past the modification time
            # it is automatically re-requested from the backend.
            #
            # /enableTTL "1"

        }
        # The statistics sections dictates how the load should be balanced among the
        # renders according to the media-type.
        /statistics
          {
          /categories
            {
            /html
              {
              /glob "*.html"
              }
            /others
              {
              /glob "*"
              }
            }
          }
          # Authorization checker: before a page in the cache is delivered, a HEAD
          # request is sent to the URL specified in /url with the query string
          # '?uri='. If the response status is 200 (OK), the page is returned
          # from the cache. Otherwise, the request is forwarded to the render and
          # its response returned.
          #
          # Only pages matching the /filter section below are checked, all other pages
          # get delivered unchecked.
          #
          # All header lines returned from the auth_checker's HEAD request that match
          # the /headers section will be returned as well.
          #
          #/auth_checker
          #  {
          #  /url "/bin/permissioncheck.html"
          #  /filter
          #    {
          #    /0000
          #      {
          #      /glob "*"
          #      /type "deny"
          #      }
          #    /0001
          #      {
          #      /glob "*.html"
          #      /type "allow"
          #      }
          #    }
          #  /headers
          #    {
          #    /0000
          #      {
          #      /glob "*"
          #      /type "deny"
          #      }
          #    /0001
          #      {
          #      /glob "Set-Cookie:*"
          #      /type "allow"
          #      }
          #    }
          #  }
  }
}

